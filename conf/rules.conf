# Copyright (c) 2014, Elvis Tombini <elvis@mapom.me>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


[
# Rule to verify proxy is ok
    {
        "id" : "proxy01",
        "match": {
            "uri": "^/$"
        },
        "action_if_match": {
            "whitelist": "True"
        }
    },

# Rules testing attributes (method, uri, protocol)
    {
        "id" : "method_GET",
        "match": {
            "method": "GET"
        },
        "action_if_match": {
            "set_tag": ["GET"]
        }
    },
    {
        "id" : "method",
        "match": {
            "uri": "^/method_get/$",
            "method": "GET"
        },
        "action_if_match": {
            "whitelist": "True"
        }
    },
    {
        "id": "method_POST",
        "match": {
            "method": "POST"
        },
        "action_if_match": {
            "set_tag": ["POST"]
        }
    },
    {
        "id": "protocol",
        "match": {
            "uri": "^/protocol/$",
            "protocol": "HTTP/1\\.1"
        },
        "action_if_match": {
            "whitelist": "True" 
        }
    },
    {
        "id": "uri",
        "match": {
            "uri": "^/uri/$"
        },
        "action_if_match": {
            "whitelist": "True" 
        }
    },
    {
        "id": "args",
        "match": {
            "uri": "^/args/$",
            "args": "^var1=val1$"
        },
        "action_if_match": {
            "whitelist": "True" 
        }
    },
    {
        "id": "test_ok",
        "prerequisite": {
            "has_tag": ["GET"]
        },
        "match": {
            "uri": "^/int/[0-9]+$"
        },
        "action_if_match": {
            "whitelist": "True"
        }
    },

# items (parameters, headers, content_url_encoded, content_json)
    {
        "id": "items_parameters",
        "match": {
            "order": ["uri", "parameters"],
            "uri": "^/parameters$",
            "parameters": [ ["var1", "^val1$"], ["var2", "^val2$"] ]
        },
        "action_if_match": {
            "whitelist": "True"
        }
    },
    {
        "id": "items_content_url_encoded",
        "prerequisite": {
            "has_tag": ["POST"],
            "has_not_tag": ["Unexpected Tag"]
        },
        "match": {
            "order": ["uri", "content_url_encoded"],
            "uri": "^/post/$",
            "content_url_encoded": [ ["var1", "^val1$"], ["var2", "^val2$"] ]
        },
        "action_if_match": {
            "whitelist": "True"
        }
    },
    {
        "id": "items_headers",
        "match": {
            "order": ["uri", "headers"],
            "uri": "^/headers/$",
            "headers": [
                ["Host", "^localhost$"],
                ["header-test", "^test$"],
                ["Accept-Encoding", "^gzip$"],
                ["Accept-Encoding", "^deflate$"],
                ["Accept-Encoding", "^compress$"],
                ["Accept", ".*"],
                ["User-Agent", "^.*$"]
            ]
        },
       "action_if_match": { "whitelist": "True"}
    },
    {
        "id": "items_content_json",
        "match": {
            "order": ["uri", "content_json"],
            "uri": "^/content_json/$",
            "content_json": {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "description": "Something you want to say about this rule",
                "type": "object",
                "required": ["var01", "var02"],
                "additionalProperties": false,
                "properties": {
                     "var01": {
                         "type": "string",
                         "pattern": "^val01$"
                     } ,
                     "var02": {
                         "type": "string",
                         "pattern": "^val02$"
                     }
                }
            }
        },
        "action_if_match": { "whitelist": "True"}
    },

# items_in (parameters, headers, content_url_encoded)
    {
        "id": "rule_parameters_in",
        "match": {
            "order": ["uri", "parameters_in"],
            "uri": "^/parameters_in/$",
            "parameters_in": [
                ["var1", "^val1$"],
                ["var2", "^val2$"]
            ]
        },
        "action_if_match": { "whitelist": "True"}
    },
    {
        "id": "rule_content_url_encoded_in",
        "match": {
            "order": ["uri", "content_url_encoded_in"],
            "uri": "^/content_url_encoded_in/$",
            "content_url_encoded_in": [
                ["var1", "^val1$"],
                ["var2", "^val2$"]
            ]
        },
        "action_if_match": { "whitelist": "True"}
    },
    {
        "id": "rule_headers_in",
        "match": {
            "order": ["uri", "headers_in"],
            "uri": "^/headers_in/$",
            "headers_in": [
                ["header-test", "^test$"]
            ]
        },
        "action_if_match": { "whitelist": "True"}
    },

# items_list (parameters, headers, content_url_encoded)
    {
        "id": "rule_parameters_list",
        "prerequisite": {
            "has_tag": ["GET"]
        },
        "match": {
            "uri": "^/parameter_list/$",
            "parameters_list": ["var1", "var2", "var3"]
        },
        "action_if_match": {
            "whitelist": "True"
        }
    },


# items_list_in (parameters, headers, content_url_encoded)
    {
        "id": "rule_parameters_list_in",
        "prerequisite": {
            "has_tag": ["GET"]
        },
        "match": {
            "uri": "^/parameters_list_in/$",
            "parameters_list_in": ["var1", "var2"]
        },
        "action_if_match": {
            "whitelist": "True"
        }
    },
    {
        "id": "rule_content_url_encoded_list_in",
        "prerequisite": {
            "has_tag": ["POST"]
        },
        "match": {
            "uri": "^/content_url_encoded_list_in/$",
            "content_url_encoded_list_in": ["var1", "var2"]
        },
        "action_if_match": {
            "whitelist": "True"
        }
    },
    {
        "id": "rule_headers_list_in",
        "prerequisite": {
            "has_tag": ["GET"]
        },
        "match": {
            "uri": "^/headers_list_in/$",
            "headers_list_in": ["listed_in01", "listed_in02"]
        },
        "action_if_match": {
            "whitelist": "True"
        }
    },
# items_unique (parameters, headers, content_url_encoded)
    {
        "id": "rule_parameters_unique",
        "prerequisite": {
            "has_tag": ["GET"]
        },
        "match": {
            "uri": "^/parameters_unique/$",
            "parameters_unique": ["var1", "var2"]
        },
        "action_if_match": {
            "whitelist": "True"
        }
    },
    {
        "id": "rule_content_url_encoded_unique",
        "prerequisite": {
            "has_tag": ["POST"]
        },
        "match": {
            "uri": "^/content_url_encoded_unique/$",
            "content_url_encoded_unique": ["var1", "var2"]
        },
        "action_if_match": {
            "whitelist": "True"
        }
    },
    {
        "id": "rule_headers_unique",
        "prerequisite": {
            "has_tag": ["GET"]
        },
        "match": {
            "uri": "^/headers_unique/$",
            "headers_unique": ["header-test"]
        },
        "action_if_match": {
            "whitelist": "True"
        }
    },
# setting headers 
    {
        "id": "rule_set_header",
        "prerequisite": {
            "has_tag": ["GET"]
        },
        "match": {
            "uri": "^/set_header/$"
        },
        "action_if_match": {
            "set_header": ["x-wlister-header", "0123456789"],
            "set_tag": ["header"]
        }
    },
    {
        "id": "rule_has_header",
        "prerequisite": {
            "has_tag": ["header"]
        },
        "match": {
            "headers_in": [
                ["x-wlister-header", "^0123456789$"]
            ]
        },
        "action_if_match": {
            "whitelist" : "True"
        }
    },
# items_all_unique (parameters, headers, content_url_encoded)
    {
        "id": "rule_parameters_all_unique",
        "prerequisite": {
            "has_tag": ["GET"]
        },
        "match": {
            "uri": "^/parameters_all_unique/$",
            "parameters_all_unique": "True"
        },
        "action_if_match": {
            "whitelist": "True"
        }
    },
    {
        "id": "rule_content_url_encoded_all_unique",
        "prerequisite": {
            "has_tag": ["POST"]
        },
        "match": {
            "uri": "^/content_url_encoded_all_unique/$",
            "content_url_encoded_all_unique": "True"
        },
        "action_if_match": {
            "whitelist": "True"
        }
    },
    {
        "id": "rule_headers_all_unique",
        "prerequisite": {
            "has_tag": ["GET"]
        },
        "match": {
            "uri": "^/headers_all_unique/$",
            "headers_all_unique": "True"
        },
        "action_if_match": {
            "whitelist": "True"
        }
    },
    {
        "id": "matching_tag01",
        "match": {
            "uri": "^/matching_tag/$"
        },
        "action_if_match": {
            "set_tag": ["matching_tag"]
        }
    },
    {
        "id": "rule_headers_all_unique",
        "prerequisite": {
            "has_tag": ["matching_tag"]
        },
        "match": {
            "uri": "^/matching_tag/$"
        },
        "action_if_match": {
            "whitelist": "True"
        }
    },
    {
        "id": "prerequisite_never_matched",
        "prerequisite": {
            "has_tag": ["never_matched_tag"]
        },
        "match": {
            "uri": "^/never_matched_tag/$"
        },
        "action_if_match": {
            "whitelist": "True"
        }
    },
# logging 
    {
        "id": "rule_logging",
        "prerequisite": {
            "has_tag": ["GET"]
        },
        "match": {
            "uri": "^/logging/$"
        },
        "action_if_match": {
            "log": [ 
                ["method", "uri", "protocol"],
                ["headers"],
                ["#Some string"],
                ["headers[Accept]"],
                ["headers[Accept-Encoding]"],
                ["content_url_encoded[var01]"],
                ["parameters[test]"],
                ["content_url_encoded"],
                ["content"]
            ],
            "whitelist": "True"
        }
    }

]
