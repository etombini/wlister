[
# Rule to verify proxy is ok
    {
        "match": {
            "uri": "^/$"
        },
        "action_if_match": {
            "whitelist": "True"
        }
    },

# Rules testing attributes (method, uri)
    {
        "match": {
            "method": "GET"
        },
        "action_if_match": {
            "set_tag": "GET"
        }
    },
    {
        "match": {
            "method": "POST"
        },
        "action_if_match": {
            "set_tag": "POST"
        }
    },
    {
        "prerequisite": {
            "has_tag": ["GET"]
        },
        "match": {
            "uri": "^/int/[0-9]+$"
        },
        "action_if_match": {
            "whitelist": "True"
        }
    },

# items (parameters, headers, content_url_encoded)
    {
        "match": {
            "uri": "^/parameters$",
            "parameters": [ ["var1", "^val1$"], ["var2", "^val2$"] ]
        },
        "action_if_match": {
            "whitelist": "True"
        }
    },
    {
        "prerequisite": {
            "has_tag": "POST",
            "has_not_tag": "Unexpected Tag" 
        },
        "match": {
            "uri": "^/post/$",
            "content_url_encoded": [ ["var1", "^val1$"], ["var2", "^val2$"] ]
        },
        "action_if_match": {
            "whitelist": "True"
        }
    },
    {
        "match": {
            "uri": "^/headers/$",
            "headers": [ 
                ["Host", "^localhost$"],
                ["header-test", "^test$"],
                ["Accept-Encoding", "^.*$"],
                ["Accept", ".*"],
                ["User-Agent", "^.*$"]
            ]
        },
       "action_if_match": { "whitelist": "True"}
    },

# items_in (parameters, headers, content_url_encoded)
    {
        "id": "rule_parameters_in",
        "match": {
            "uri": "^/parameters_in/$",
            "parameters_in": [
                ["var1", "^val1$"],
                ["var2", "^val2$"]
            ]
        },
        "action_if_match": { "whitelist": "True"}
    },
    {
        "id": "rule_content_url_encoded_in",
        "match": {
            "uri": "^/content_url_encoded_in/$",
            "content_url_encoded_in": [
                ["var1", "^val1$"],
                ["var2", "^val2$"]
            ]
        },
        "action_if_match": { "whitelist": "True"}
    },
    {
        "id": "rule_headers_in",
        "match": {
            "uri": "^/headers_in/$",
            "headers_in": [
                ["header-test", "^test$"]
            ]
        },
        "action_if_match": { "whitelist": "True"}
    },

# items_list (parameters, headers, content_url_encoded)
    {
        "id": "rule_parameters_list",
        "prerequisite": {
            "has_tag": "GET"
        },
        "match": {
            "uri": "^/parameter_list/$",
            "parameters_list": ["var1", "var2", "var3"]
        },
        "action_if_match": {
            "whitelist": "True"
        }
    },


# items_list_in (parameters, headers, content_url_encoded)
    {
        "id": "rule_parameters_list_in",
        "prerequisite": {
            "has_tag": "GET"
        },
        "match": {
            "uri": "^/parameters_list_in/$",
            "parameters_list_in": ["var1", "var2"]
        },
        "action_if_match": {
            "whitelist": "True"
        }
    },
    {
        "id": "rule_content_url_encoded_list_in",
        "prerequisite": {
            "has_tag": "POST"
        },
        "match": {
            "uri": "^/content_url_encoded_list_in/$",
            "content_url_encoded_list_in": ["var1", "var2"]
        },
        "action_if_match": {
            "whitelist": "True"
        }
    },
    {
        "id": "rule_headers_list_in",
        "prerequisite": {
            "has_tag": "GET"
        },
        "match": {
            "uri": "^/headers_list_in/$",
            "headers_list_in": ["listed_in01", "listed_in02"]
        },
        "action_if_match": {
            "whitelist": "True"
        }
    }

]


